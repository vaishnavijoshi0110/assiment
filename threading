import threading
import time
import os

class CircularBuffer:
    def __init__(self, capacity):
        self.capacity = capacity
        self.buffer = [None] * capacity
        self.size = 0
        self.front = 0
        self.rear = -1

    def is_empty(self):
        return self.size == 0

    def is_full(self):
        return self.size == self.capacity

    def enqueue(self, item):
        if self.is_full():
            self.dequeue()
        self.rear = (self.rear + 1) % self.capacity
        self.buffer[self.rear] = item
        self.size += 1

    def dequeue(self):
        if self.is_empty():
            return None
        item = self.buffer[self.front]
        self.front = (self.front + 1) % self.capacity
        self.size -= 1
        return item

class Logger:
    def __init__(self, log_file, max_size=5, max_rotations=10):
        self.log_file = log_file
        self.max_size = max_size * 1024 * 1024  # Convert MB to bytes
        self.max_rotations = max_rotations
        self.current_size = 0
        self.rotations = 0
        self.lock = threading.Lock()
        self.buffer = CircularBuffer(1000)  # Adjust buffer size as needed

    def log(self, level, file_name, function_name, thread_id, message):
        formatted_message = f"{time.strftime('%Y-%m-%d %H:%M:%S')} | {level} | {file_name} | {function_name} | {thread_id}\n> {message}\n"
        with self.lock:
            self.buffer.enqueue(formatted_message)
            self.current_size += len(formatted_message)
            if self.current_size >= self.max_size:
                self.rotate_log_file()

    def rotate_log_file(self):
        if self.rotations >= self.max_rotations:
            self.rotations = 0
        new_file_name = f"{self.log_file}.{self.rotations}"
        os.rename(self.log_file, new_file_name)
        self.current_size = 0
        self.rotations += 1

    def start(self):
        while True:
            with self.lock:
                if not self.buffer.is_empty():
                    log_message = self.buffer.dequeue()
                    with open(self.log_file, "a") as f:
                        f.write(log_message)
            time.sleep(1)  # Adjust sleep time as needed

# Example usage
if __name__ == "__main__":
    logger = Logger("app.log")
    logger_thread = threading.Thread(target=logger.start)
    logger_thread.start()

    # Example log messages
    for i in range(20):
        logger.log("INFO", "example.py", "main", threading.get_ident(), f"This is log message {i}")
        time.sleep(0.5)  # Simulate some processing time

    logger_thread.join()
